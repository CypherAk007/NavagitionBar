// Generated by view binder compiler. Do not edit!
package com.example.bottomnavigation.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.bottomnavigation.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListViewBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView deathCases;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final TextView recoveredCases;

  @NonNull
  public final TextView stateName;

  @NonNull
  public final TextView totalCases;

  private ListViewBinding(@NonNull ConstraintLayout rootView, @NonNull TextView deathCases,
      @NonNull LinearLayout linearLayout, @NonNull TextView recoveredCases,
      @NonNull TextView stateName, @NonNull TextView totalCases) {
    this.rootView = rootView;
    this.deathCases = deathCases;
    this.linearLayout = linearLayout;
    this.recoveredCases = recoveredCases;
    this.stateName = stateName;
    this.totalCases = totalCases;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListViewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.deathCases;
      TextView deathCases = rootView.findViewById(id);
      if (deathCases == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = rootView.findViewById(id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.recoveredCases;
      TextView recoveredCases = rootView.findViewById(id);
      if (recoveredCases == null) {
        break missingId;
      }

      id = R.id.stateName;
      TextView stateName = rootView.findViewById(id);
      if (stateName == null) {
        break missingId;
      }

      id = R.id.totalCases;
      TextView totalCases = rootView.findViewById(id);
      if (totalCases == null) {
        break missingId;
      }

      return new ListViewBinding((ConstraintLayout) rootView, deathCases, linearLayout,
          recoveredCases, stateName, totalCases);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
